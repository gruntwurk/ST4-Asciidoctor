// SYNTAX TEST "Packages/ST4-Asciidoctor/Syntaxes/Asciidoctor.sublime-syntax"
= Monospace Text Formatting

AsciiDoc Documentation reference:
https://docs.asciidoctor.org/asciidoc/latest/text/monospace/[Monospace^]

Monospace is one of AsciiDoc text formatting elements, belonging to the
https://docs.asciidoctor.org/asciidoc/latest/text/[_quotes_ category^].

== Constrained

AsciiDoc Documentation reference:
https://docs.asciidoctor.org/asciidoc/latest/text/#constrained[Constrained formatting pair^]

[.big.red]*Source*

[source,asciidoc]
This `is monospaced`. This is not.

[.big.red]*Result*

============================
This `is monospaced`. This is not.
//   ^^^^^^^^^^^^^^^        meta.literalinner.single
//    ^^^^^^^^^^^^^         string.other.literal.single
//   ^                      punctuation.definition.literal.single.begin
//                 ^        punctuation.definition.literal.single.end
//                  ^^^^^  -meta.literalinner
============================


== Unconstrained

AsciiDoc Documentation reference:
https://docs.asciidoctor.org/asciidoc/latest/text/#unconstrained[Unconstrained formatting pair^]

[.big.red]*Source*

[source,asciidoc]
SublimeText is ``super``fast.

[.big.red]*Result*

=============================
SublimeText is ``super``fast.
//             ^^^^^^^^^        meta.literalinner.double
//               ^^^^^          string.other.literal.double
//             ^^               punctuation.definition.literal.double.begin
//                    ^^        punctuation.definition.literal.double.end
//                      ^^^^^  -meta.literalinner
=============================


== Multi-line

Monospaced text can span across multiple lines in the same paragraph, as long as no blank lines or block elements are encountered between the opening and closing monospace delimiter:

[.big.red]*Source*

[source,asciidoc]
.................................
`a very long monospace.
Spanning multiple lines.` Normal.
.................................

[.big.red]*Result*

=================================
`a very long monospace.
Spanning multiple lines.` Normal.
//<-                                meta.literalinner.single
//^^^^^^^^^^^^^^^^^^^^^^^           meta.literalinner.single
//<-                                string.other.literal.single
//^^^^^^^^^^^^^^^^^^^^^^            string.other.literal.single
//                      ^           punctuation.definition.literal.single.end
//                       ^^^^^^^^  -meta.literalinner
=================================


=== With Line Comments

Single-line comments inside a monospaced text spanning across multiple lines will be ingored in the final text, and are OK to use:

[.big.red]*Source*

[source,asciidoc]
...................................................
`A monospace text spanning multiple lines
// a comment
with a single line comment inbetween.` Normal.
...................................................

[.big.red]*Result*

===================================================
`A monospace text spanning multiple lines
// a comment
// a comment
//^^^^^^^^^^ comment.line.double-slash   meta.line.comment.content
//^^^^^^^^^^ meta.literalinner
with a single line comment inbetween.` Normal.
//<-                                            meta.literalinner.single
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          meta.literalinner.single
//                                   ^          punctuation.definition.literal.single.end
//                                    ^^^^^^^  -meta.literalinner
===================================================

Block comments (like any other block elements) are not OK, and will break the quote.


=== With Blank Line

But if a blank line is encountered before the closing delimiter -- i.e. if the text spans across multiple paragraphs -- then Asciidoctor will not format the text as monospace:

[.big.red]*Source*

[source,asciidoc]
...............................................
`A very long bold text spanning multiple lines.

With blank lines inbetween.`
...............................................

[.big.red]*Result*

===============================================
`A very long bold text spanning multiple lines.
//<-                                             meta.literalinner.single
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  meta.literalinner.single

//<- invalid.illegal
With blank lines inbetween.`
//^^^^^^^^^^^^^^^^^^^^^^^^^^                    -meta.literalinner

===============================================

The AsciiDoc syntax will handle such cases by interrupting monospace-parsing when encountering a blank line, and scoping the first blank line as `invalid` -- to draw the user's attention to the problem.


== Edge Cases

See:
https://docs.asciidoctor.org/asciidoc/latest/text/troubleshoot-unconstrained-formatting/#unconstrained-edge-cases[Unconstrained pair edge cases^]



== Typographic Quotes False Positives

// =============================================================================
//                           Test for False-Positives
// =============================================================================
// Backticks adjacent to single/double quote delimiters (straight) are for making
// the quote curly, and should not be seen as monospaced/inline-code.


[.big.red]*Source*

[source,asciidoc]
...............................
Example: '`text`' and "`text`".
...............................


[.big.red]*Result*

===============================
Example: '`text`' and "`text`".
//       ^^                    punctuation.definition.curlyquote.single.begin
//             ^^              punctuation.definition.curlyquote.single.end
//                    ^^       punctuation.definition.curlyquote.double.begin
//                          ^^ punctuation.definition.curlyquote.double.end
//
===============================

Single backticks within typographic quotes are interpreted as literal characters:

[.big.red]*Source*

[source,asciidoc]
........................................
E.g. "``endpoints``" and '``endpoints``'
........................................


[.big.red]*Result*

========================================
E.g. "``endpoints``" and '``endpoints``'
//   ^^                                     punctuation.definition.curlyquote.double.begin
//                ^^                        punctuation.definition.curlyquote.double.end
//                       ^^                 punctuation.definition.curlyquote.single.begin
//                                    ^^    punctuation.definition.curlyquote.single.end
//     ^                                   -punctuation.definition.curlyquote
//               ^                         -punctuation.definition.curlyquote
//                         ^               -punctuation.definition.curlyquote
//                                   ^     -punctuation.definition.curlyquote
========================================



== Unconstrained Within Typographic Quotes

Let's check that these are not misinterpreted inside monospaced:

[.big.red]*Source*

[source,asciidoc]
......................................
Hello world `#ZZZ` end.

Hello world "```xxx `YYY` xxx```" end.
......................................


[.big.red]*Result*

======================================
Hello world `#ZZZ` end.

Hello world "```xxx `YYY` xxx```" end.
======================================


[WARNING]
======================================
Asciidoctor renders `YYY` as a nested `<code>` block within a `<code>` block:

[source,html]
<code>xxx <code>YYY</code> xxx</code>

{blank}... that's probably a bug.
Need more testing to understand how our Syntax should handle such edge cases.
======================================

// EOF //
